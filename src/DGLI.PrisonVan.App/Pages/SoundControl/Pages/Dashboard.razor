@page "/soundcontrol/dashboard"
@using DGLI.PrisonVan.App.Models
@using DGLI.PrisonVan.Data;
@using DGLI.PrisonVan.App.Data.Services;
@using DGLI.PrisonVan.App.Pages.SoundControl.Components;
@using NAudio.Wave;
@implements IDisposable;
@inject IAudiofileService audioFileService;

<div>
    <Row>
        <Col Span="7" Offset="1">
            <Card Bordered="false" Title="Controls" Style="width: 300px">
                <Body>
                    <PlaybackControls 
                        OnPlayButtonClicked="async () => await OnPlayAsync()"
                        OnPauseButtonClicked="() => OnPause()"
                        OnStopButtonClicked="() => OnStop()">
                    </PlaybackControls>
                </Body>
            </Card>
        </Col>
        <Col Span="13" Offset="2">
            <Table
                TItem="SoundFile"
                DataSource="dataSource">
                <PropertyColumn Property="c=>c.Sequence" Sortable />
                <PropertyColumn Title="File Name" Property="c=>c.FileName" Sortable />
                <PropertyColumn Title="Status" Property="c => c.Status">
                    <PlaybackIconStatus Status="context.Status"></PlaybackIconStatus>
                </PropertyColumn>
            </Table>
        </Col>
    </Row>
</div>
@code {
    private SoundFile[] dataSource;
    private List<AudioPlaybackState> currentAudioOutputs = new();
    private int currentSequenceNumber = 1;
    private bool isPlaying = false;
    private bool isStopped = true;

    protected override void OnInitialized()
    {
        var devices = DirectSoundOut.Devices;
        dataSource = audioFileService.LoadFiles()
            .Where(soundfile =>
                soundfile.Soundcard is not null &&
                devices.Any(device => device.Guid == soundfile.Soundcard.ProductGuid))
            .OrderBy(d => d.Sequence)
            .ToArray();
        dataSource.ForEach(d => d.Status = SoundFileStatus.Pending);
    }

    private async Task OnPlayAsync()
    {
        isPlaying = true;
        while (isPlaying)
        {
            var currentConfigs = dataSource.Where(d => d.Sequence == currentSequenceNumber);
            if (!currentAudioOutputs.Any())
            {
                foreach (var config in currentConfigs)
                {
                    var outputDevice = new DirectSoundOut(config.Soundcard.ProductGuid);
                    var audioFile = new AudioFileReader(config.FilePath);
                    outputDevice.Init(audioFile);
                    config.Status = SoundFileStatus.Pending;
                    currentAudioOutputs.Add(new AudioPlaybackState(outputDevice, audioFile, config));
                }
            }

            var audioOutputTasks = new List<Task>();
            foreach (var audioOutput in currentAudioOutputs)
            {
                var outputDevice = audioOutput.Device;
                audioOutputTasks.Add(Task.Run(() =>
                {
                    outputDevice.Play();
                    audioOutput.SoundFile.Status = SoundFileStatus.Playing;
                    while (outputDevice.PlaybackState == PlaybackState.Playing && isPlaying)
                    {
                        Thread.Sleep(100);
                    }
                }));
            }

            await Task.WhenAll(audioOutputTasks);

            if (!isStopped)
            {
                currentSequenceNumber++;
            }
            var stoppedPlaybackDeviceDelegate = (DirectSoundOut device) => device.PlaybackState == PlaybackState.Stopped;
            foreach (var stoppedPlaybackDevice in currentAudioOutputs.Where(audioOutput => stoppedPlaybackDeviceDelegate(audioOutput.Device)))
            {
                stoppedPlaybackDevice.SoundFile.Status = SoundFileStatus.Completed;
                stoppedPlaybackDevice.Device.Dispose();
            }
            currentAudioOutputs.RemoveAll(audioOutput => stoppedPlaybackDeviceDelegate(audioOutput.Device));

            if (!currentAudioOutputs.Any() && !dataSource.Any(d => d.Sequence >= currentSequenceNumber))
            {
                isPlaying = false;
            }
        }
    }

    private void OnPause()
    {
        isPlaying = false;
        foreach (var currentAudioOutput in currentAudioOutputs)
        {
            currentAudioOutput.Device.Pause();
            currentAudioOutput.SoundFile.Status = SoundFileStatus.Paused;
        }
    }

    private void OnStop()
    {
        isStopped = true;
        isPlaying = false;
        currentSequenceNumber = 1;
        foreach (var currentAudioOutput in currentAudioOutputs)
        {
            currentAudioOutput.Device.Stop();
            currentAudioOutput.Device.Dispose();
            currentAudioOutput.SoundFile.Status = SoundFileStatus.Completed;
        }
        currentAudioOutputs.Clear();
    }

    void IDisposable.Dispose()
    {
        currentAudioOutputs.ForEach(audioOutput => audioOutput.Device.Dispose());
    }
}
